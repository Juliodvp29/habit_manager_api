// src/notifications/notifications.service.ts (ACTUALIZADO)

import { Injectable } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { LessThan, Repository } from 'typeorm';
import { HabitLog } from '../entities/habit-log.entity';
import { Habit } from '../entities/habit.entity';
import { Notification } from '../entities/notification.entity';
import { UserSettings } from '../entities/user-settings.entity';
import { User } from '../entities/user.entity';
import { FcmService } from '../fcm/fcm.service'; // ‚¨ÖÔ∏è NUEVO

@Injectable()
export class NotificationsService {
  constructor(
    @InjectRepository(Notification)
    private notificationRepository: Repository<Notification>,
    @InjectRepository(User)
    private userRepository: Repository<User>,
    @InjectRepository(UserSettings)
    private userSettingsRepository: Repository<UserSettings>,
    @InjectRepository(Habit)
    private habitRepository: Repository<Habit>,
    @InjectRepository(HabitLog)
    private habitLogRepository: Repository<HabitLog>,
    private fcmService: FcmService, // ‚¨ÖÔ∏è NUEVO
  ) { }

  async getUserNotifications(userId: number, unreadOnly: boolean = false) {
    const where: any = { user: { id: userId } };

    if (unreadOnly) {
      where.isRead = false;
    }

    return await this.notificationRepository.find({
      where,
      order: { scheduledAt: 'DESC' },
      take: 50,
    });
  }

  async markAsRead(notificationId: number, userId: number) {
    const notification = await this.notificationRepository.findOne({
      where: { id: notificationId, user: { id: userId } },
    });

    if (!notification) {
      throw new Error('Notificaci√≥n no encontrada');
    }

    notification.isRead = true;
    return await this.notificationRepository.save(notification);
  }

  async markAllAsRead(userId: number) {
    const result = await this.notificationRepository.update(
      { user: { id: userId }, isRead: false },
      { isRead: true },
    );

    return {
      message: 'Todas las notificaciones marcadas como le√≠das',
      markedCount: result.affected || 0,
    };
  }

  // ‚¨áÔ∏è M√âTODO ACTUALIZADO: Crear notificaci√≥n Y enviar push
  async createNotification(
    userId: number,
    title: string,
    message: string,
    scheduledAt?: Date,
    sendPush: boolean = true, // ‚¨ÖÔ∏è NUEVO par√°metro
  ) {
    const notification = this.notificationRepository.create({
      user: { id: userId },
      title,
      message,
      scheduledAt: scheduledAt || new Date(),
      sentAt: new Date(),
    });

    const saved = await this.notificationRepository.save(notification);

    // ‚¨áÔ∏è NUEVO: Enviar push notification autom√°ticamente
    if (sendPush) {
      try {
        await this.fcmService.sendPushForNotification(saved.id);
      } catch (error) {
        console.error('Error sending push notification:', error);
      }
    }

    return saved;
  }

  // Mensajes motivacionales
  private getRandomMotivationalMessage(): string {
    const messages = [
      '¬°Recuerda que cada peque√±o paso cuenta! Sigue adelante.',
      'La consistencia es la clave del √©xito. ¬°T√∫ puedes!',
      'Hoy es un d√≠a perfecto para crear nuevos h√°bitos.',
      'Cada d√≠a es una nueva oportunidad para ser mejor.',
      '¬°No te rindas! Los h√°bitos se construyen con perseverancia.',
      'Celebra tus victorias diarias, por peque√±as que sean.',
      'La motivaci√≥n viene de la acci√≥n, ¬°empieza ahora!',
      'T√∫ eres m√°s fuerte de lo que crees. ¬°Sigue adelante!',
      'Los h√°bitos poderosos se construyen d√≠a a d√≠a.',
      '¬°Felicitaciones por cuidar de ti mismo hoy!',
    ];
    return messages[Math.floor(Math.random() * messages.length)];
  }

  // ‚¨áÔ∏è CRON JOB ACTUALIZADO: Recordatorios diarios con push
  @Cron(CronExpression.EVERY_DAY_AT_8AM)
  async sendDailyReminders() {
    console.log('üîî Ejecutando cron: recordatorios diarios...');

    const users = await this.userRepository.find({
      relations: ['settings'],
      where: { isActive: true },
    });

    for (const user of users) {
      if (!user.settings?.notificationEnabled) continue;

      const habits = await this.habitRepository.find({
        where: { user: { id: user.id }, isActive: true },
      });

      if (habits.length > 0) {
        await this.createNotification(
          user.id,
          '¬°Hora de tus h√°bitos! üéØ',
          `Tienes ${habits.length} h√°bito(s) pendiente(s) hoy. ¬°No olvides completarlos!`,
          new Date(),
          true, // ‚¨ÖÔ∏è Enviar push
        );
      }
    }

    console.log('‚úÖ Recordatorios diarios enviados');
  }

  // ‚¨áÔ∏è CRON JOB ACTUALIZADO: Mensajes motivacionales con push
  @Cron(CronExpression.EVERY_DAY_AT_9AM)
  async sendMotivationalMessages() {
    console.log('üí™ Ejecutando cron: mensajes motivacionales...');

    const users = await this.userRepository.find({
      relations: ['settings'],
      where: { isActive: true },
    });

    for (const user of users) {
      if (!user.settings?.notificationEnabled) continue;

      const message = this.getRandomMotivationalMessage();
      await this.createNotification(
        user.id,
        'Mensaje motivacional del d√≠a ‚ú®',
        message,
        new Date(),
        true, // ‚¨ÖÔ∏è Enviar push
      );
    }

    console.log('‚úÖ Mensajes motivacionales enviados');
  }

  // ‚¨áÔ∏è NUEVO: Recordatorios nocturnos a las 9:10 PM con push
  @Cron('10 21 * * *')
  async sendEveningReminders() {
    console.log('üåô Ejecutando cron: recordatorios nocturnos...');

    const users = await this.userRepository.find({
      relations: ['settings'],
      where: { isActive: true },
    });

    for (const user of users) {
      if (!user.settings?.notificationEnabled) continue;

      const message = this.getRandomMotivationalMessage();
      await this.createNotification(
        user.id,
        'Buenas noches üåô',
        `Antes de dormir, reflexiona: ${message}`,
        new Date(),
        true, // ‚¨ÖÔ∏è Enviar push
      );
    }

    console.log('‚úÖ Recordatorios nocturnos enviados');
  }

  // ‚¨áÔ∏è CRON JOB ACTUALIZADO: Notificaciones de rachas con push
  @Cron(CronExpression.EVERY_DAY_AT_10PM)
  async checkStreaksAndAchievements() {
    console.log('üèÜ Ejecutando cron: verificando rachas y logros...');

    const users = await this.userRepository.find({
      relations: ['settings'],
      where: { isActive: true },
    });

    for (const user of users) {
      if (!user.settings?.notificationEnabled) continue;

      const habits = await this.habitRepository.find({
        where: { user: { id: user.id }, isActive: true },
        relations: ['logs'],
      });

      for (const habit of habits) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        const todayLog = habit.logs.find(
          (log) => new Date(log.logDate).getTime() === today.getTime(),
        );

        if (todayLog?.completed) {
          // Calcular racha actual
          const sortedLogs = habit.logs
            .filter((log) => log.completed)
            .sort((a, b) => b.logDate.getTime() - a.logDate.getTime());

          let currentStreak = 0;
          let expectedDate = new Date(today);

          for (const log of sortedLogs) {
            if (new Date(log.logDate).getTime() === expectedDate.getTime()) {
              currentStreak++;
              expectedDate.setDate(expectedDate.getDate() - 1);
            } else {
              break;
            }
          }

          // Notificar rachas importantes CON PUSH
          if (currentStreak === 3) {
            await this.createNotification(
              user.id,
              'üî• ¬°Nueva racha de 3 d√≠as!',
              `¬°Felicitaciones! Has completado "${habit.title}" por 3 d√≠as consecutivos.`,
              new Date(),
              true, // ‚¨ÖÔ∏è Enviar push
            );
          } else if (currentStreak === 7) {
            await this.createNotification(
              user.id,
              'üéâ ¬°Semana completa!',
              `¬°Incre√≠ble! Has mantenido "${habit.title}" por una semana entera.`,
              new Date(),
              true, // ‚¨ÖÔ∏è Enviar push
            );
          } else if (currentStreak === 30) {
            await this.createNotification(
              user.id,
              'üíé ¬°Mes completo!',
              `¬°Fant√°stico! Has completado "${habit.title}" todos los d√≠as de este mes.`,
              new Date(),
              true, // ‚¨ÖÔ∏è Enviar push
            );
          }
        }
      }
    }

    console.log('‚úÖ Verificaci√≥n de rachas completada');
  }

  // ‚¨áÔ∏è CRON JOB ACTUALIZADO: Res√∫menes semanales con push
  @Cron(CronExpression.EVERY_WEEK)
  async sendWeeklySummaries() {
    console.log('üìä Ejecutando cron: res√∫menes semanales...');

    const users = await this.userRepository.find({
      relations: ['settings'],
      where: { isActive: true },
    });

    for (const user of users) {
      if (!user.settings?.weeklySummary || !user.settings?.notificationEnabled) continue;

      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);

      const habits = await this.habitRepository.find({
        where: { user: { id: user.id }, isActive: true },
        relations: ['logs'],
      });

      let totalCompleted = 0;
      let totalHabits = habits.length;

      for (const habit of habits) {
        const weeklyLogs = habit.logs.filter(
          (log) => new Date(log.logDate) >= weekAgo && log.completed,
        );
        totalCompleted += weeklyLogs.length;
      }

      const completionRate = totalHabits > 0 ? (totalCompleted / (totalHabits * 7)) * 100 : 0;

      await this.createNotification(
        user.id,
        'üìä Resumen semanal',
        `Esta semana completaste ${totalCompleted} h√°bitos de un total posible de ${totalHabits * 7}. Tasa de completitud: ${completionRate.toFixed(1)}%. ¬°Sigue as√≠!`,
        new Date(),
        true, // ‚¨ÖÔ∏è Enviar push
      );
    }

    console.log('‚úÖ Res√∫menes semanales enviados');
  }

  // ‚¨áÔ∏è NUEVO: Cron job para reenviar notificaciones push fallidas
  @Cron(CronExpression.EVERY_HOUR)
  async retryFailedPushNotifications() {
    console.log('üîÑ Ejecutando cron: reintentando notificaciones push fallidas...');

    // Buscar notificaciones de las √∫ltimas 24 horas que no se enviaron
    const oneDayAgo = new Date();
    oneDayAgo.setHours(oneDayAgo.getHours() - 24);

    const failedNotifications = await this.notificationRepository.find({
      where: {
        pushSent: false,
        scheduledAt: LessThan(new Date()),
        sentAt: LessThan(new Date()),
      },
      relations: ['user'],
      take: 50, // Limitar a 50 por ejecuci√≥n
    });

    for (const notification of failedNotifications) {
      try {
        await this.fcmService.sendPushForNotification(notification.id);
      } catch (error) {
        console.error(`Error reintentando push para notificaci√≥n ${notification.id}:`, error);
      }
    }

    console.log(`‚úÖ Reintentos completados: ${failedNotifications.length} notificaciones procesadas`);
  }

  // Limpiar notificaciones antiguas
  @Cron(CronExpression.EVERY_WEEK)
  async cleanupOldNotifications() {
    console.log('üßπ Ejecutando cron: limpieza de notificaciones antiguas...');

    const twoWeeksAgo = new Date();
    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);

    const result = await this.notificationRepository.delete({
      scheduledAt: LessThan(twoWeeksAgo),
      isRead: true,
    });

    console.log(`‚úÖ Limpiadas ${result.affected || 0} notificaciones antiguas`);
  }
}